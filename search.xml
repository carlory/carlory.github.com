<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Resize PV and PVC manifests by Manual</title>
      <link href="/2020/08/25/Resize-PV-and-PVC-manifests-by-manual/"/>
      <url>/2020/08/25/Resize-PV-and-PVC-manifests-by-manual/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> kubectl create -f sc.yaml -f pvc.yaml -f pv.yaml</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> kubectl get pvc test-pvc</span><br><span class="line"></span><br><span class="line">NAME       STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">test-pvc   Bound    test-pv   200Gi      RWX            manual         18m</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> kubectl get pv test-pv</span><br><span class="line"></span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM              STORAGECLASS   REASON   AGE</span><br><span class="line">test-pv   200Gi      RWX            Retain           Bound    carlory/test-pvc   manual                    18m</span><br></pre></td></tr></table></figure><p>编排清单：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">manual</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">fake</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line"><span class="attr">volumeBindingMode:</span> <span class="string">Immediate</span></span><br><span class="line"><span class="attr">allowVolumeExpansion:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">manual</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ReadWriteMany</span></span><br><span class="line"><span class="attr">  capacity:</span></span><br><span class="line"><span class="attr">    storage:</span> <span class="number">200</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  nfs:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/if/kubernetes/volumes/test-pv</span></span><br><span class="line"><span class="attr">    server:</span> <span class="number">192.168</span><span class="number">.101</span><span class="number">.106</span></span><br><span class="line"><span class="attr">  persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  volumeName:</span> <span class="string">test-pv</span></span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">manual</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ReadWriteMany</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">200</span><span class="string">Gi</span></span><br></pre></td></tr></table></figure><h2 id="扩容示例"><a href="#扩容示例" class="headerlink" title="扩容示例"></a>扩容示例</h2><p><strong>Step 1</strong>: 修改PVC的请求容量到400Gi</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> kubectl get pvc test-pvc -ojson | jq 'setpath(["spec", "resources", "requests", "storage"]; "400Gi")' | kubectl apply -f - </span><br><span class="line"></span><br><span class="line">persistentvolumeclaim/test-pvc configured</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> kubectl get pvc test-pvc</span><br><span class="line"></span><br><span class="line"> NAME       STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line"> test-pvc   Bound    test-pv   200Gi      RWX            manual         20m</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> kubectl get pvc test-pvc -oyaml</span><br><span class="line"></span><br><span class="line"> apiVersion: v1</span><br><span class="line"> kind: PersistentVolumeClaim</span><br><span class="line"> metadata:</span><br><span class="line">   annotations:</span><br><span class="line">     pv.kubernetes.io/bind-completed: "yes"</span><br><span class="line">   creationTimestamp: "2020-03-31T15:07:20Z"</span><br><span class="line">   finalizers:</span><br><span class="line">   - kubernetes.io/pvc-protection</span><br><span class="line">   name: test-pvc</span><br><span class="line">   namespace: carlory</span><br><span class="line">   resourceVersion: "60619371"</span><br><span class="line">   selfLink: /api/v1/namespaces/carlory/persistentvolumeclaims/test-pvc</span><br><span class="line">   uid: 51b2b9bb-7361-11ea-af09-005056b4d66c</span><br><span class="line"> spec:</span><br><span class="line">   accessModes:</span><br><span class="line">   - ReadWriteMany</span><br><span class="line">   resources:</span><br><span class="line">     requests:</span><br><span class="line">       storage: 400Gi</span><br><span class="line">   storageClassName: manual</span><br><span class="line">   volumeName: test-pv</span><br><span class="line"> status:</span><br><span class="line">   accessModes:</span><br><span class="line">   - ReadWriteMany</span><br><span class="line">   capacity:</span><br><span class="line">     storage: 200Gi</span><br><span class="line">   conditions:</span><br><span class="line">   - lastProbeTime: null</span><br><span class="line">     lastTransitionTime: "2020-03-31T15:31:07Z"</span><br><span class="line">     status: "True"</span><br><span class="line">     type: Resizing</span><br><span class="line">   phase: Bound</span><br></pre></td></tr></table></figure><p><strong>Step 2</strong>: 修改PV的容量到400Gi</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> kubectl get pv test-pv -ojson | jq 'setpath(["spec", "capacity", "storage"]; "400Gi")' | kubectl apply -f -</span><br><span class="line"></span><br><span class="line">persistentvolume/test-pv configured</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> kubectl get pv test-pv</span><br><span class="line"> NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM              STORAGECLASS   REASON   AGE</span><br><span class="line"> test-pv   400Gi      RWX            Retain           Bound    carlory/test-pvc    manual                    30m</span><br></pre></td></tr></table></figure><p><strong>Step 3</strong>: 删除PVC的Resizing的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> shell 1</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> kubectl proxy</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> shell 2</span><br><span class="line"><span class="meta">$</span> data=$(oc get pvc test-pvc -ojson | jq 'setpath(["status", "capacity", "storage"]; "400Gi")' | jq 'setpath(["status", "conditions"]; [])')</span><br><span class="line"><span class="meta">$</span> curl -XPUT -H "Content-Type: application/json" -d $data  127.0.0.1:8001/api/v1/namespaces/carlory/persistentvolumeclaims/test-pvc/status</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> kubectl get pvc</span><br><span class="line"></span><br><span class="line"> NAME       STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line"> test-pvc   Bound    test-pv   400Gi      RWX            manual         37m</span><br><span class="line"></span><br><span class="line"><span class="meta"> $</span> kubectl get pvc test-pvc -oyaml</span><br><span class="line"></span><br><span class="line"> apiVersion: v1</span><br><span class="line"> kind: PersistentVolumeClaim</span><br><span class="line"> metadata:</span><br><span class="line">   annotations:</span><br><span class="line">     pv.kubernetes.io/bind-completed: "yes"</span><br><span class="line">   creationTimestamp: "2020-03-31T15:07:20Z"</span><br><span class="line">   finalizers:</span><br><span class="line">   - kubernetes.io/pvc-protection</span><br><span class="line">   name: test-pvc</span><br><span class="line">   namespace: carlory</span><br><span class="line">   resourceVersion: "60622486"</span><br><span class="line">   selfLink: /api/v1/namespaces/carlory/persistentvolumeclaims/test-pvc</span><br><span class="line">   uid: 51b2b9bb-7361-11ea-af09-005056b4d66c</span><br><span class="line"> spec:</span><br><span class="line">   accessModes:</span><br><span class="line">   - ReadWriteMany</span><br><span class="line">   resources:</span><br><span class="line">     requests:</span><br><span class="line">       storage: 400Gi</span><br><span class="line">   storageClassName: manual</span><br><span class="line">   volumeName: test-pv</span><br><span class="line"> status:</span><br><span class="line">   accessModes:</span><br><span class="line">   - ReadWriteMany</span><br><span class="line">   capacity:</span><br><span class="line">     storage: 400Gi</span><br><span class="line">   phase: Bound</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setting up a local mirror for Docker Hub images</title>
      <link href="/2019/07/15/Setting-up-a-local-mirror-for-Docker-Hub-images/"/>
      <url>/2019/07/15/Setting-up-a-local-mirror-for-Docker-Hub-images/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="实施环境"><a href="#实施环境" class="headerlink" title="实施环境"></a>实施环境</h3><table><thead><tr><th align="left">角色</th><th align="left">主机</th><th align="left">配置</th><th align="left">备注</th><th></th></tr></thead><tbody><tr><td align="left">镜像加速节点</td><td align="left">192.168.2.79</td><td align="left">1. /data/registry目录300G的存储<br>2. 机器配置4核8G<br>3. 开放端口为443</td><td align="left">此节点用来部署docker-registry容器，提供镜像加速的功能。对外访问的域名为mirror.regsitry.pelican.local</td><td></td></tr><tr><td align="left">代理</td><td align="left"></td><td align="left"><a href="http://192.168.2.30:8080" target="_blank" rel="noopener">http://192.168.2.30:8080</a></td><td align="left">企业内网环境下，出于安全方面的考虑，数据中心只能通过代理才可以访问到外部网络。通过此代理可以访问到以下域名：<br>1. registry-1.docker.io:443<br>2. auth.docker.io:443<br>3. production.cloudflare.docker.com:443</td><td></td></tr></tbody></table><h3 id="环境检查"><a href="#环境检查" class="headerlink" title="环境检查"></a>环境检查</h3><h4 id="检查节点的系统配置"><a href="#检查节点的系统配置" class="headerlink" title="检查节点的系统配置"></a>检查节点的系统配置</h4><h5 id="检查存储镜像的目录容量"><a href="#检查存储镜像的目录容量" class="headerlink" title="检查存储镜像的目录容量"></a>检查存储镜像的目录容量</h5><p>执行下面命令，检查/data/registry目录的容量大小，期望容量为300G。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><h5 id="检查CPU和内存的配置"><a href="#检查CPU和内存的配置" class="headerlink" title="检查CPU和内存的配置"></a>检查CPU和内存的配置</h5><p>执行下面命令，检查CPU和内存的配置，期望配置为4核8G。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lscpu</span><br><span class="line">free -mh</span><br></pre></td></tr></table></figure><h5 id="检查443端口是否被占用"><a href="#检查443端口是否被占用" class="headerlink" title="检查443端口是否被占用"></a>检查443端口是否被占用</h5><p>执行下面命令，查看端口占用情况，期望结果为443端口未被占用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -lnp | grep 443</span><br></pre></td></tr></table></figure><h5 id="检查yum源"><a href="#检查yum源" class="headerlink" title="检查yum源"></a>检查yum源</h5><p>执行下面命令，查看yum源是否可以安装docker。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list | grep docker</span><br></pre></td></tr></table></figure><h5 id="检查代理"><a href="#检查代理" class="headerlink" title="检查代理"></a>检查代理</h5><p>执行下面命令，检查通过提供的代理，是否可以访问下面域名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 设置代理（当前shell生效）</span><br><span class="line">export http_proxy=http://192.168.2.30:8080</span><br><span class="line">export https_proxy=http://192.168.2.30:8080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 检查在内网环境下，外部域名和端口是否可以访问</span><br><span class="line">curl -I https://registry-1.docker.io</span><br><span class="line">curl -I https://auth.docker.io</span><br><span class="line">curl -I https://production.cloudflare.docker.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 清除代理（当前shell）</span><br><span class="line">unset http_proxy</span><br><span class="line">unset https_proxy</span><br></pre></td></tr></table></figure><h2 id="实施步骤"><a href="#实施步骤" class="headerlink" title="实施步骤"></a>实施步骤</h2><p>由于实施环境为网内，无法访问外网，需事先下载好安装包，并将安装包导入到镜像加速节点上。下面列举一下，离线安装包的文件组织结构。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">│   └── docker-compose</span><br><span class="line">├── config</span><br><span class="line">│   └── mirror</span><br><span class="line">│       ├── cert</span><br><span class="line">│       │   ├── mirror.registry.pelican.local.key</span><br><span class="line">│       │   ├── mirror.registry.pelican.local.crt</span><br><span class="line">│       └── mirror_env</span><br><span class="line">├── docker-compose.yaml</span><br><span class="line">├── images</span><br><span class="line">│   └── docker-registry-v2.tar</span><br></pre></td></tr></table></figure><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装docker</span><br><span class="line">yum install docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置开机自启并启动docker</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装docker-compose（拷贝提前下好的docker-compose文件至$PATH目录下）</span><br><span class="line">cp bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">chmod a+x /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="创建数据目录"><a href="#创建数据目录" class="headerlink" title="创建数据目录"></a>创建数据目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 存放镜像</span><br><span class="line">mkdir -p /data/registry</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 存放证书</span><br><span class="line">mkdir -p /data/cert</span><br></pre></td></tr></table></figure><h3 id="拷贝证书"><a href="#拷贝证书" class="headerlink" title="拷贝证书"></a>拷贝证书</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp config/mirror/cert/mirror.registry.pelican.local.key /data/cert/mirror.registry.pelican.local.key</span><br><span class="line">cp config/mirror/cert/mirror.registry.pelican.local.crt /data/cert/mirror.registry.pelican.local.crt</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io</span><br><span class="line">REGISTRY_HTTP_ADDR=0.0.0.0:443</span><br><span class="line">REGISTRY_HTTP_TLS_CERTIFICATE=/etc/cert/server.crt</span><br><span class="line">REGISTRY_HTTP_TLS_KEY=/etc/cert/server.key</span><br><span class="line">http_proxy=http://192.168.2.30:8080</span><br><span class="line">https_proxy=http://192.168.2.30:8080</span><br><span class="line">no_proxy=localhost,127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="配置docker-compose-yaml文件"><a href="#配置docker-compose-yaml文件" class="headerlink" title="配置docker-compose.yaml文件"></a>配置docker-compose.yaml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mirror:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">registry:2</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">mirror-registry</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/data/registry:/var/lib/registry:z</span></span><br><span class="line"><span class="attr">    - type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">      source:</span> <span class="string">/data/cert/mirror.registry.pelican.local.key</span></span><br><span class="line"><span class="attr">      target:</span> <span class="string">/etc/cert/server.key</span></span><br><span class="line"><span class="attr">    - type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">      source:</span> <span class="string">/data/cert/mirror.registry.pelican.local.crt</span></span><br><span class="line"><span class="attr">      target:</span> <span class="string">/etc/cert/server.crt</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line"><span class="attr">    env_file:</span></span><br><span class="line">      <span class="string">./config/mirror/mirror_env</span></span><br></pre></td></tr></table></figure><h3 id="部署容器"><a href="#部署容器" class="headerlink" title="部署容器"></a>部署容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 导入镜像</span><br><span class="line">docker load -i docker-registry-v2.tar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 启动容器</span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看状态</span><br><span class="line">watch docker-compose ps</span><br></pre></td></tr></table></figure><h2 id="部署验证"><a href="#部署验证" class="headerlink" title="部署验证"></a>部署验证</h2><h3 id="更新dockerd配置，并使配置生效"><a href="#更新dockerd配置，并使配置生效" class="headerlink" title="更新dockerd配置，并使配置生效"></a>更新dockerd配置，并使配置生效</h3><p>在需要使用镜像加速的节点上,执行下面步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 添加下面配置</span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["https://mirror.registry.pelican.local"],</span><br><span class="line">  "insecure-registries": ["mirror.registry.pelican.local"]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 发送信号，使配置生效</span><br><span class="line">kill -SIGHUP `pidof dockerd-current`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看dockerd日志，当发现下面信息表示配置生效</span><br><span class="line">journalctl -u docker -ef</span><br><span class="line"></span><br><span class="line">level=info msg="Got signal to reload configuration, reloading from: /etc/docker/daemon.json"</span><br></pre></td></tr></table></figure><h3 id="拉取busybox镜像，进行验证"><a href="#拉取busybox镜像，进行验证" class="headerlink" title="拉取busybox镜像，进行验证"></a>拉取busybox镜像，进行验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull busybox</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> registry </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
